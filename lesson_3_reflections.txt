when would you want to use a remote repo rather than keeping all work local?
-sharing with other team members, making your code open source and available to others, I often use it to share code between computers.

describe the differences between forks, clones, and branches.  when would you use one instead of another?
-A fork is GitHub specific- it allows you to create a remote copy of a repository- essentially cloning it to your own GitHub account. This would be useful to modify/explore repos that belong to other people without actually disturbing their own work (you don't have permission to edit their repo, but you can work with a fork).

A clone is the act of copying a repo to your own local git system.  If you've forked a repo or created one remotely, you'll likely want to clone to your local system to make updates/changes so you can do so in your own dev environment.

A branch is the act of splitting a repo into a new version (for new features, different fixes, etc)- this is useful for making changes while others continue to update the existing code base- a branch can later be merged back into master.

what is the benefit of having a copy of the last known state of the remote stored locally?
-It creates a quick way to compare your latest local with the remote- and allows you to pull from the remote to a "sandboxed" local master (without actually updating your latest version so you can review and merge as needed).

how would you collaborate without using Git of GitHub?  What would be easier and what would be harder?
-there are other distributed code sharing systems (like SVN), but some other options might be dropbox or a shared drive.  You could even just email versioned documents back and forth.  Depending on what you choose, you might lose the history git/github provide, allowing for easy code rollbacks, or the pull request/review and branching option.
